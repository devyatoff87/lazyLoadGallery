import { imgArray } from './pic-srcs.js';

let imgCont = document.querySelector('.img-cont');


const createColumns = () => {
    let colAmount = 1;
    if (window.innerWidth > 991.8) {
        colAmount = 3;
    } else if (window.innerWidth > 578.9) {
        colAmount = 2
    }
    for (let i = 0; i < colAmount; i++) {
        let col = document.createElement('div');
        col.className = 'img-column';
        imgCont.append(col)
    }
}

createColumns();

let imgColumns = document.querySelectorAll('.img-column');
let imgsPerColumn = Math.floor(imgArray.length / imgColumns.length);

const getRand = (max, min) => {
    let a = Math.random() * (max - min) + min;
    return a.toFixed(2);
}

const createImgs = () => {
    let k = 0;
    let m = 0;
    for (let i = 0; i <= imgColumns.length - 1; i++) {
        for (let u = 0; u < imgsPerColumn; u++) {
            let item = document.createElement('div');
            item.className = 'intersect-me';
            let img = document.createElement('img');
            img.dataset.src = imgArray[k++];
            img.src = "";

            img.setAttribute('style', 'transition: ' + getRand(1.7, 0.7) + 's ease-out')

            item.append(img);
            imgColumns[m].append(item);
        }
        m++
    }
}

createImgs();








let imgs = document.querySelectorAll('.intersect-me');

async function callback(entries) {
    await entries.forEach((entry) => {
        if (entry.isIntersecting === true) {
            setTimeout(() => {
                let img = entry.target.querySelector('img');
                img.src = img.dataset.src;

                entry.target.classList.add("show");
            }, getRand(200, 500))
        }
    });
}

const observer = new IntersectionObserver(callback, {
    threshold: '0.5'
});


imgs.forEach((item) => {
    observer.observe(item);
});










//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAxX2NyZWF0ZUVsZW1lbnRzLmpzIiwiMDJfb2JzZXJ2ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW1nQXJyYXkgfSBmcm9tICcuL3BpYy1zcmNzLmpzJztcclxuXHJcbmxldCBpbWdDb250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmltZy1jb250Jyk7XHJcblxyXG5cclxuY29uc3QgY3JlYXRlQ29sdW1ucyA9ICgpID0+IHtcclxuICAgIGxldCBjb2xBbW91bnQgPSAxO1xyXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID4gOTkxLjgpIHtcclxuICAgICAgICBjb2xBbW91bnQgPSAzO1xyXG4gICAgfSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDU3OC45KSB7XHJcbiAgICAgICAgY29sQW1vdW50ID0gMlxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xBbW91bnQ7IGkrKykge1xyXG4gICAgICAgIGxldCBjb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb2wuY2xhc3NOYW1lID0gJ2ltZy1jb2x1bW4nO1xyXG4gICAgICAgIGltZ0NvbnQuYXBwZW5kKGNvbClcclxuICAgIH1cclxufVxyXG5cclxuY3JlYXRlQ29sdW1ucygpO1xyXG5cclxubGV0IGltZ0NvbHVtbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW1nLWNvbHVtbicpO1xyXG5sZXQgaW1nc1BlckNvbHVtbiA9IE1hdGguZmxvb3IoaW1nQXJyYXkubGVuZ3RoIC8gaW1nQ29sdW1ucy5sZW5ndGgpO1xyXG5cclxuY29uc3QgZ2V0UmFuZCA9IChtYXgsIG1pbikgPT4ge1xyXG4gICAgbGV0IGEgPSBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XHJcbiAgICByZXR1cm4gYS50b0ZpeGVkKDIpO1xyXG59XHJcblxyXG5jb25zdCBjcmVhdGVJbWdzID0gKCkgPT4ge1xyXG4gICAgbGV0IGsgPSAwO1xyXG4gICAgbGV0IG0gPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gaW1nQ29sdW1ucy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICBmb3IgKGxldCB1ID0gMDsgdSA8IGltZ3NQZXJDb2x1bW47IHUrKykge1xyXG4gICAgICAgICAgICBsZXQgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBpdGVtLmNsYXNzTmFtZSA9ICdpbnRlcnNlY3QtbWUnO1xyXG4gICAgICAgICAgICBsZXQgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgICAgIGltZy5kYXRhc2V0LnNyYyA9IGltZ0FycmF5W2srK107XHJcbiAgICAgICAgICAgIGltZy5zcmMgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndHJhbnNpdGlvbjogJyArIGdldFJhbmQoMS43LCAwLjcpICsgJ3MgZWFzZS1vdXQnKVxyXG5cclxuICAgICAgICAgICAgaXRlbS5hcHBlbmQoaW1nKTtcclxuICAgICAgICAgICAgaW1nQ29sdW1uc1ttXS5hcHBlbmQoaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG0rK1xyXG4gICAgfVxyXG59XHJcblxyXG5jcmVhdGVJbWdzKCk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIlxyXG5sZXQgaW1ncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnRlcnNlY3QtbWUnKTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGNhbGxiYWNrKGVudHJpZXMpIHtcclxuICAgIGF3YWl0IGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcclxuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW1nID0gZW50cnkudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IGltZy5kYXRhc2V0LnNyYztcclxuXHJcbiAgICAgICAgICAgICAgICBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmFkZChcInNob3dcIik7XHJcbiAgICAgICAgICAgIH0sIGdldFJhbmQoMjAwLCA1MDApKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5jb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihjYWxsYmFjaywge1xyXG4gICAgdGhyZXNob2xkOiAnMC41J1xyXG59KTtcclxuXHJcblxyXG5pbWdzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgIG9ic2VydmVyLm9ic2VydmUoaXRlbSk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXX0=
