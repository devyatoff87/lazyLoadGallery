import { imgArray } from './pic-srcs.js';

let imgCont = document.querySelector('.img-cont');


const createColumns = () => {
    let colAmount = 1;
    if (window.innerWidth > 991.8) {
        colAmount = 3;
    } else if (window.innerWidth > 578.9) {
        colAmount = 2
    }
    for (let i = 0; i < colAmount; i++) {
        let col = document.createElement('div');
        col.className = 'img-column';
        imgCont.append(col)
    }
}

createColumns();

let imgColumns = document.querySelectorAll('.img-column');
let imgsPerColumn = Math.floor(imgArray.length / imgColumns.length);

const createImgs = () => {
    let k = 0;
    let m = 0;
    for (let i = 0; i <= imgColumns.length - 1; i++) {
        for (let u = 0; u < imgsPerColumn; u++) {
            let item = document.createElement('div');
            item.className = 'intersect-me';
            let img = document.createElement('img');
            img.dataset.src = imgArray[k++];
            img.src = "";

            item.append(img);
            imgColumns[m].append(item);
        }
        m++
    }
}

createImgs();








let imgs = document.querySelectorAll('.intersect-me');

const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
        if (entry.isIntersecting === true) {
            let img = entry.target.querySelector('img')
            img.src = img.dataset.src;
            entry.target.classList.add("show");
        }
    });
}, {
    threshold: '0.5'
});


imgs.forEach((item, index) => {
    observer.observe(item);
});










//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAxX2NyZWF0ZUVsZW1lbnRzLmpzIiwiMDJfb2JzZXJ2ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW1nQXJyYXkgfSBmcm9tICcuL3BpYy1zcmNzLmpzJztcclxuXHJcbmxldCBpbWdDb250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmltZy1jb250Jyk7XHJcblxyXG5cclxuY29uc3QgY3JlYXRlQ29sdW1ucyA9ICgpID0+IHtcclxuICAgIGxldCBjb2xBbW91bnQgPSAxO1xyXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID4gOTkxLjgpIHtcclxuICAgICAgICBjb2xBbW91bnQgPSAzO1xyXG4gICAgfSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDU3OC45KSB7XHJcbiAgICAgICAgY29sQW1vdW50ID0gMlxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xBbW91bnQ7IGkrKykge1xyXG4gICAgICAgIGxldCBjb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb2wuY2xhc3NOYW1lID0gJ2ltZy1jb2x1bW4nO1xyXG4gICAgICAgIGltZ0NvbnQuYXBwZW5kKGNvbClcclxuICAgIH1cclxufVxyXG5cclxuY3JlYXRlQ29sdW1ucygpO1xyXG5cclxubGV0IGltZ0NvbHVtbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW1nLWNvbHVtbicpO1xyXG5sZXQgaW1nc1BlckNvbHVtbiA9IE1hdGguZmxvb3IoaW1nQXJyYXkubGVuZ3RoIC8gaW1nQ29sdW1ucy5sZW5ndGgpO1xyXG5cclxuY29uc3QgY3JlYXRlSW1ncyA9ICgpID0+IHtcclxuICAgIGxldCBrID0gMDtcclxuICAgIGxldCBtID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGltZ0NvbHVtbnMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgdSA9IDA7IHUgPCBpbWdzUGVyQ29sdW1uOyB1KyspIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaXRlbS5jbGFzc05hbWUgPSAnaW50ZXJzZWN0LW1lJztcclxuICAgICAgICAgICAgbGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICBpbWcuZGF0YXNldC5zcmMgPSBpbWdBcnJheVtrKytdO1xyXG4gICAgICAgICAgICBpbWcuc3JjID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGl0ZW0uYXBwZW5kKGltZyk7XHJcbiAgICAgICAgICAgIGltZ0NvbHVtbnNbbV0uYXBwZW5kKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtKytcclxuICAgIH1cclxufVxyXG5cclxuY3JlYXRlSW1ncygpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJcclxubGV0IGltZ3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW50ZXJzZWN0LW1lJyk7XHJcblxyXG5jb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBsZXQgaW1nID0gZW50cnkudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJ2ltZycpXHJcbiAgICAgICAgICAgIGltZy5zcmMgPSBpbWcuZGF0YXNldC5zcmM7XHJcbiAgICAgICAgICAgIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSwge1xyXG4gICAgdGhyZXNob2xkOiAnMC41J1xyXG59KTtcclxuXHJcblxyXG5pbWdzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICBvYnNlcnZlci5vYnNlcnZlKGl0ZW0pO1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19
